---

# Variables setup
- name: Include os-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

# Makes sure that the repo cache is fresh
- name: Update APT cache.
  apt:
    update_cache: true
  when: ansible_os_family == 'Debian'
  changed_when: false

# Install python-pip
- include_tasks: setup-python-pip.yml

# Install the Docker repository
- include_tasks: "repo-{{ ansible_os_family }}.yml"
  when: not skip_repo

# Install the Docker dependencies
- name: Install Docker dependencies.
  package:
    name: "{{ docker_dependencies }}"
    state: present
  when: not skip_containerd or not skip_engine

# Install containerd
- include_tasks: setup-containerd.yml
  when: not skip_containerd

# Install the Docker Engine
- include_tasks: setup-docker-engine.yml
  when: not skip_engine

# Install the Docker CLI
- include_tasks: setup-docker-cli.yml
  when: not skip_cli

# Setup the Docker Swarm Cluster
- block:
    - include_tasks: setup-swarm-cluster.yml
    - include_tasks: setup-swarm-labels.yml
  when: not skip_swarm

# Adds the Docker admin users to the Docker group
- include_tasks: setup-docker-group.yml
  when: not skip_group

# Install docker-py
- include_tasks: setup-docker-py.yml
  when: not skip_docker_py

# Install docker-compose
- include_tasks: setup-docker-compose.yml
  when: not skip_docker_compose

#stop & restart dockerd
#- name: stop dockerd
#  command: sudo rm -rf /var/lib/docker && rm /var/run/docker.pid
#  register: stop_dockerd
#  changed_when: false

#- name: open a protected connection on s1
#  command: sudo dockerd --tlsverify --tlscacert=./s1/ca.pem --tlscert=./s1/server-cert.pem --tlskey=./s1/server-key.pem -H=0.0.0.0:2376 
#  register: riapro
#  changed_when: false
#  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

#- name: open a protected connection on s2
#  command: sudo nohup dockerd --tlsverify --tlscacert=./s2/ca2.pem --tlscert=./s2/server-cert2.pem --tlskey=./s2/server-key2.pem -H=0.0.0.0:2376
#  register: riapro
#  changed_when: false
#  when: "inventory_hostname == groups['docker_swarm_worker'][0]"
